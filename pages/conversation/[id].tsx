import {doc, getDoc, getDocs} from 'firebase/firestore';
import {GetServerSideProps} from 'next';
import Head from 'next/head';
import {useAuthState} from 'react-firebase-hooks/auth';
import styled from 'styled-components';
import ConversationScreen from '../../components/ConversationScreen';
import Sitebar from '../../components/Sitebar';
import {auth, db} from '../../config/firebase';
import {Converstion, IMessage} from '../../type';
import {generateQueryGetMessages, transformMessage} from '../../utils/getMessagesInConversation';
import getRecipientEmail from '../../utils/getRecipientEmail';

interface Props {
    conversation: Converstion;
    messages: IMessage[];
}

const StyledContainer = styled.div`
    display: flex;
`;

const StyledConversationContainer = styled.div`
    flex-grow: 1;
    overflow: scroll;
    height: 100vh;
    -ms-overflow-style: none;
    scrollbar-width: none;
    ::-webkit-scrollbar {
        display: none;
    }
`

const Conversation = ({conversation, messages}: Props) => {
    const [loggedInUser, _loading, _error] = useAuthState(auth);

    return (
        <StyledContainer>
            <Head>
                <title>Chat vá»›i {getRecipientEmail(conversation.users, loggedInUser)}</title>
                <meta name='description' content='Generated by create next app' />
                <link rel='icon' href='/favicon.ico' />
            </Head>
            <Sitebar />
            <StyledConversationContainer>
                <ConversationScreen conversation={conversation} messages={messages} />
            </StyledConversationContainer>
        </StyledContainer>
    );
};

export default Conversation;

export const getServerSideProps: GetServerSideProps<Props, {id: string}> = async (context) => {
    const conversationId = context.params?.id;

    // get conversation, to know who we are chatting with
    const conversationRef = doc(db, 'conversations', conversationId as string);
    const conversationSnapshot = await getDoc(conversationRef);

    // get all messages between logged in user and recipient in this conversation
    const queryMessages = generateQueryGetMessages(conversationId);

    const messagesSnapshot = await getDocs(queryMessages);

    const messages = messagesSnapshot.docs.map((messageDoc) => transformMessage(messageDoc));

    return {
        props: {
            conversation: conversationSnapshot.data() as Converstion,
            messages,
        },
    };
};
